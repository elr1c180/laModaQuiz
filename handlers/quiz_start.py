from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from fsm import quiz

from database import *

from kb.questions import *
from kb import final


router = Router()

@router.callback_query(F.data == 'start_quiz') 
async def first_q(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í —Å–∫–ª–∞–¥—Å–∫–æ–π –∑–æ–Ω–µ –ü–í–ó Lamoda –µ—Å—Ç—å 3 –ª–∞–º–ø–æ—á–∫–∏, –∞ –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ 3 –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è. –ó–∞ –∫–∞–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–µ–π –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –∫ –∫–∞–∫–æ–π –ª–∞–º–ø–æ—á–∫–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è?",
        reply_markup=first()
    )
    await state.set_state(quiz.Quiz.question1)

@router.callback_query(quiz.Quiz.question1)
async def second_q(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'q1_right':
        await state.update_data(question1=2)
    else:
        await state.update_data(question1=0)

    await callback.message.answer(
        "–ö–∞–∫ –≤ Lamoda –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–±–∏—Ä–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑–æ–≤ –∫ —è–∫–æ—Ä–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É? –ò—â–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å—Ç–µ–Ω–¥–µ üôÉ",
        reply_markup=second()
    )
    await state.set_state(quiz.Quiz.question2)


@router.callback_query(quiz.Quiz.question2)
async def third_q(callback: CallbackQuery, state: FSMContext):
    print(callback.data)
    if callback.data == 'q2_right':
        await state.update_data(question2=1)
    else:
        await state.update_data(question2=0)

    await callback.message.answer(
        "–í  –∫–∞—Ç–∞–ª–æ–≥–µ Lamoda 35% –≤—Å–µ—Ö —Ñ—É—Ç–±–æ–ª–æ–∫ —Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞. –ê 13% –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ñ—É—Ç–±–æ–ª–∫–∏, –Ω–æ –Ω–µ —Å–µ—Ä—ã–µ. –°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ñ—É—Ç–±–æ–ª–∫–∏?",
        reply_markup=third()
    )
    await state.set_state(quiz.Quiz.question3)

@router.callback_query(quiz.Quiz.question3)
async def fourth_q(callback: CallbackQuery, state: FSMContext):
    print(callback.data)
    if callback.data == 'q3_right':
        await state.update_data(question3=3)
    else:
        await state.update_data(question3=0)

    await callback.message.answer(
        "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ Retention Rate –Ω–∞ –∫–æ–Ω–µ—Ü –≥–æ–¥–∞. –£ –∫–æ–º–ø–∞–Ω–∏–∏ X –±—ã–ª–æ 6 –º–ª–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞ –≥–æ–¥ –ø—Ä–∏—à–ª–æ 4,3 –º–ª–Ω –Ω–æ–≤—ã—Ö –∏ —É—à–ª–æ 4,25 –º–ª–Ω –∏–∑ —Ç–µ–∫—É—â–∏—Ö.",
        reply_markup=fourth()
    )
    await state.set_state(quiz.Quiz.question4)

@router.callback_query(quiz.Quiz.question4)
async def fifth_q(callback: CallbackQuery, state: FSMContext):
    print(callback.data)
    if callback.data == 'q4_right':
        await state.update_data(question4=3)
    else:
        await state.update_data(question4=0)

    await callback.message.answer(
        "–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML-–º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±—Ä–∞–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤? –ò—â–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å—Ç–µ–Ω–¥–µ üôÉ",
        reply_markup=fifth()
    )
    await state.set_state(quiz.Quiz.question5)

@router.callback_query(quiz.Quiz.question5)
async def final_q(callback: CallbackQuery, state: FSMContext):
    print(callback.data)
    if callback.data == 'q5_right':
        await state.update_data(question5=1)
    else:
        await state.update_data(question5=0)

    q = await state.get_data()
    print(q)
    x = int(q['question1']) + int(q['question2']) + int(q['question3']) + int(q['question4']) + int(q['question5'])
    score = x
    update_score(callback.from_user.id, score)
    if x <= 4:
        await callback.message.answer(

            f"–¢—ã –Ω–∞–±—Ä–∞–ª {x} LaCoins –∏–∑ 10!\n–ü–æ–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ LaBasket –∏ –ì–æ–Ω–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏ :) ",
        )

    elif x >=5:
        await callback.message.answer(
            f"–¢—ã –Ω–∞–±—Ä–∞–ª {x} LaCoins –∏–∑ 10!\n–ü–æ–∫–∞–∂–∏ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç–µ–Ω–¥–µ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–∑ :)",
        )

    await callback.message.answer(
        "–û—Å—Ç–∞–Ω–µ–º—Å—è –Ω–∞ —Å–≤—è–∑–∏!",
        reply_markup=final.final_kb()
    )
    await state.clear()